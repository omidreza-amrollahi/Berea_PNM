import openpnm as op
from openpnm.models import physics as mods
import numpy as np
import pandas as pd


ws = op.Workspace()
ws.clear()
r_max = 5
sigma = 0.35
fname = 'Berea700_r'+str(r_max)+'_sigma'+str(int(sigma*100))
# old way of importing things
# =============================================================================
# import pickle as pk
# net = pk.load(open(fname + '.dict', 'rb'))
# pn = op.network.GenericNetwork()
# pn.update(net)
# geom = op.geometry.Imported(network=pn)
# prj = pn.project
prj = op.io.PoreSpy.load(fname + '.dict')
pn = prj.network
geom = prj.geometries()['geo_01']

# trim isolated clusters
# =============================================================================
net_health = pn.check_network_health()
op.topotools.trim(network=pn, pores=net_health["trim_pores"])



# Plotting the network
# =============================================================================
# fig = op.topotools.plot_connections(network=pn, alpha=0.8, color='grey')
# fig = op.topotools.plot_coordinates(network=pn, fig=fig, color='b', markersize=10)
# fig = op.topotools.plot_coordinates(network=pn, pores=pn.pores('front'), fig=fig, color='r', markersize=10)
# fig.set_size_inches(8, 8)
# fig.tight_layout()


# Modifying pore network 
# =============================================================================
del geom['pore.area']
del geom['pore.volume']
del geom['throat.conduit_lengths.pore1']
del geom['throat.conduit_lengths.pore2']
del geom['throat.conduit_lengths.throat']
del geom['throat.endpoints.tail']
del geom['throat.endpoints.head']


geom['throat.volume'] = np.zeros(geom['throat.volume'].shape)
geom.add_model(propname='pore.volume',
                model=op.models.geometry.pore_volume.sphere)
geom['pore.volume'][pn.pores('boundary')] = 0
geom.add_model(propname='throat.endpoints',
                model=op.models.geometry.throat_endpoints.spherical_pores)
geom.add_model(propname='pore.area',
                model=op.models.geometry.pore_area.sphere)
geom.add_model(propname='throat.conduit_lengths',
                model=op.models.geometry.throat_length.conduit_lengths)


# defining the fluid
# =============================================================================
oil = op.phases.GenericPhase(network=pn,name='oil')
oil['throat.contact_angle'] = 180 
oil['pore.contact_angle'] = 180
oil['throat.surface_tension'] = 20e-3
oil['pore.surface_tension'] = 20e-3
oil['throat.viscosity'] = 0.8e-3
oil['pore.viscosity'] = 0.8e-3

water = op.phases.GenericPhase(network=pn,name='water')
water['throat.contact_angle'] = 0 
water['pore.contact_angle'] = 0
water['throat.surface_tension'] = 20e-3
water['pore.surface_tension'] = 20e-3
water['throat.viscosity'] = 9.4e-3
water['pore.viscosity'] = 9.4e-3



# defining the physics
# =============================================================================
phys_oil = op.physics.GenericPhysics(network=pn, phase=oil, geometry=geom)
phys_oil.add_model(propname='throat.entry_pressure',
                model=mods.capillary_pressure.washburn)
phys_oil['pore.entry_pressure'] = 0
phys_oil.add_model(propname='throat.flow_shape_factors',
               model=mods.flow_shape_factors.conical_frustum_and_stick)
phys_oil.add_model(propname='throat.hydraulic_conductance',
               model=mods.hydraulic_conductance.hagen_poiseuille)

phys_water = op.physics.GenericPhysics(network=pn, phase=water, geometry=geom)
phys_water.add_model(propname='throat.entry_pressure',
                model=mods.capillary_pressure.washburn)
phys_water['pore.entry_pressure'] = 0
phys_water.add_model(propname='throat.flow_shape_factors',
               model=mods.flow_shape_factors.conical_frustum_and_stick)
phys_water.add_model(propname='throat.hydraulic_conductance',
               model=mods.hydraulic_conductance.hagen_poiseuille)

# running an invasion percolation
# =============================================================================
ip = op.algorithms.InvasionPercolation(network=pn, phase=oil)
Finlets_init = pn.pores('left')
Finlets=([Finlets_init[x] for x in range(0, len(Finlets_init), 2)])
ip.set_inlets(pores=Finlets)
ip.run()
# Foutlets_init = pn.pores('right')
# Foutlets=([Foutlets_init[x] for x in range(0, len(Foutlets_init), 2)])
# ip.apply_trapping(outlets=Foutlets)
oil.update(ip.results())

# running the relative permeability module
# =============================================================================
rp = op.algorithms.metrics.RelativePermeability(network=pn)
rp.setup(invading_phase='oil', defending_phase='water',
         invasion_sequence='invasion_sequence')
rp.run()

import matplotlib.pyplot as plt
fig, ax = plt.subplots()
rp.plot_Kr_curves(fig)
plt.xlim([0, 1])

results=rp.get_Kr_data()
print(pd.DataFrame(results['kr_nwp']))